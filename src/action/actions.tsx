/* Generated by restful-react */

import React from "react";
import {
  Get,
  GetProps,
  useGet,
  UseGetProps,
  Mutate,
  MutateProps,
  useMutate,
  UseMutateProps,
} from "restful-react";
export const SPEC_VERSION = "0.1.0";
export interface AttendeeCreate {
  first_name: string;
  middle_name: string;
  last_name: string;
  email: string;
  street: string;
  city: string;
  state: string;
  country_code: string;
  status: string;
  is_us_citizen: boolean;
}

export interface AttendeeRead {
  first_name: string;
  middle_name: string;
  last_name: string;
  email: string;
  street: string;
  city: string;
  state: string;
  country_code: string;
  status: string;
  is_us_citizen: boolean;
  id: number;
}

export interface AttendeeReadUpdate {
  first_name: string;
  middle_name: string;
  last_name: string;
  email: string;
  street: string;
  city: string;
  state: string;
  country_code: string;
  status: string;
  is_us_citizen: boolean;
}

export interface BodyLoginLoginPost {
  grant_type?: string;
  username: string;
  password: string;
  scope?: string;
  client_id?: string;
  client_secret?: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface LanguageCategoryCreate {
  name: string;
  description?: string;
}

export interface LanguageCategoryRead {
  name: string;
  description?: string;
  id: number;
}

export interface LanguageCategoryReadUpdate {
  name: string;
  description: string;
}

export interface LanguageCreate {
  name: string;
  comment?: string;
}

export interface LanguageRead {
  name: string;
  comment?: string;
  id: number;
}

export interface LanguageReadUpdate {
  name: string;
  comment: string;
}

export interface RoleCreate {
  name: string;
  description: string;
  pay: number;
}

export interface RoleRead {
  name: string;
  description: string;
  pay: number;
  id: number;
}

export interface RoleReadUpdate {
  name: string;
  description: string;
  pay: number;
}

export interface Token {
  access_token: string;
  token_type: string;
}

export interface UserCreate {
  username: string;
  first_name: string;
  last_name: string;
  email: string;
  password: string;
  admin?: boolean;
}

export interface UserRead {
  username: string;
  first_name: string;
  last_name: string;
  email: string;
  password: string;
  admin?: boolean;
  id: number;
  last_sign_in: string;
}

export interface ValidationError {
  loc: string[];
  msg: string;
  type: string;
}

export type LoginLoginPostProps = Omit<
  MutateProps<Token, HTTPValidationError, void, void, void>,
  "path" | "verb"
>;

/**
 * Login
 */
export const LoginLoginPost = (props: LoginLoginPostProps) => (
  <Mutate<Token, HTTPValidationError, void, void, void>
    verb="POST"
    path={`/login`}
    {...props}
  />
);

export type UseLoginLoginPostProps = Omit<
  UseMutateProps<Token, HTTPValidationError, void, void, void>,
  "path" | "verb"
>;

/**
 * Login
 */
export const useLoginLoginPost = (props: UseLoginLoginPostProps) =>
  useMutate<Token, HTTPValidationError, void, void, void>(
    "POST",
    `/login`,
    props
  );

export type CreateUsersPostProps = Omit<
  MutateProps<UserRead, HTTPValidationError, void, UserCreate, void>,
  "path" | "verb"
>;

/**
 * Create
 */
export const CreateUsersPost = (props: CreateUsersPostProps) => (
  <Mutate<UserRead, HTTPValidationError, void, UserCreate, void>
    verb="POST"
    path={`/users`}
    {...props}
  />
);

export type UseCreateUsersPostProps = Omit<
  UseMutateProps<UserRead, HTTPValidationError, void, UserCreate, void>,
  "path" | "verb"
>;

/**
 * Create
 */
export const useCreateUsersPost = (props: UseCreateUsersPostProps) =>
  useMutate<UserRead, HTTPValidationError, void, UserCreate, void>(
    "POST",
    `/users`,
    props
  );

export interface ShowUsersIdGetPathParams {
  id: number;
}

export type ShowUsersIdGetProps = Omit<
  GetProps<UserRead, HTTPValidationError, void, ShowUsersIdGetPathParams>,
  "path"
> &
  ShowUsersIdGetPathParams;

/**
 * Show
 */
export const ShowUsersIdGet = ({ id, ...props }: ShowUsersIdGetProps) => (
  <Get<UserRead, HTTPValidationError, void, ShowUsersIdGetPathParams>
    path={`/users/${id}`}
    {...props}
  />
);

export type UseShowUsersIdGetProps = Omit<
  UseGetProps<UserRead, HTTPValidationError, void, ShowUsersIdGetPathParams>,
  "path"
> &
  ShowUsersIdGetPathParams;

/**
 * Show
 */
export const useShowUsersIdGet = ({ id, ...props }: UseShowUsersIdGetProps) =>
  useGet<UserRead, HTTPValidationError, void, ShowUsersIdGetPathParams>(
    (paramsInPath: ShowUsersIdGetPathParams) => `/users/${paramsInPath.id}`,
    { pathParams: { id }, ...props }
  );

export interface RouteAttendeesGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RouteAttendeesGetProps = Omit<
  GetProps<
    AttendeeRead[],
    HTTPValidationError,
    RouteAttendeesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const RouteAttendeesGet = (props: RouteAttendeesGetProps) => (
  <Get<AttendeeRead[], HTTPValidationError, RouteAttendeesGetQueryParams, void>
    path={`/attendees`}
    {...props}
  />
);

export type UseRouteAttendeesGetProps = Omit<
  UseGetProps<
    AttendeeRead[],
    HTTPValidationError,
    RouteAttendeesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const useRouteAttendeesGet = (props: UseRouteAttendeesGetProps) =>
  useGet<
    AttendeeRead[],
    HTTPValidationError,
    RouteAttendeesGetQueryParams,
    void
  >(`/attendees`, props);

export type RouteAttendeesPostProps = Omit<
  MutateProps<AttendeeRead, HTTPValidationError, void, AttendeeCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RouteAttendeesPost = (props: RouteAttendeesPostProps) => (
  <Mutate<AttendeeRead, HTTPValidationError, void, AttendeeCreate, void>
    verb="POST"
    path={`/attendees`}
    {...props}
  />
);

export type UseRouteAttendeesPostProps = Omit<
  UseMutateProps<AttendeeRead, HTTPValidationError, void, AttendeeCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRouteAttendeesPost = (props: UseRouteAttendeesPostProps) =>
  useMutate<AttendeeRead, HTTPValidationError, void, AttendeeCreate, void>(
    "POST",
    `/attendees`,
    props
  );

export type RouteAttendeesDeleteProps = Omit<
  MutateProps<AttendeeRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteAttendeesDelete = (props: RouteAttendeesDeleteProps) => (
  <Mutate<AttendeeRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/attendees`}
    {...props}
  />
);

export type UseRouteAttendeesDeleteProps = Omit<
  UseMutateProps<AttendeeRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteAttendeesDelete = (props: UseRouteAttendeesDeleteProps) =>
  useMutate<AttendeeRead[], unknown, void, void, void>("DELETE", `/attendees`, {
    ...props,
  });

export interface RouteAttendeesItemIdGetPathParams {
  item_id: number;
}

export type RouteAttendeesItemIdGetProps = Omit<
  GetProps<
    AttendeeRead,
    HTTPValidationError,
    void,
    RouteAttendeesItemIdGetPathParams
  >,
  "path"
> &
  RouteAttendeesItemIdGetPathParams;

/**
 * Get One
 */
export const RouteAttendeesItemIdGet = ({
  item_id,
  ...props
}: RouteAttendeesItemIdGetProps) => (
  <Get<
    AttendeeRead,
    HTTPValidationError,
    void,
    RouteAttendeesItemIdGetPathParams
  >
    path={`/attendees/${item_id}`}
    {...props}
  />
);

export type UseRouteAttendeesItemIdGetProps = Omit<
  UseGetProps<
    AttendeeRead,
    HTTPValidationError,
    void,
    RouteAttendeesItemIdGetPathParams
  >,
  "path"
> &
  RouteAttendeesItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteAttendeesItemIdGet = ({
  item_id,
  ...props
}: UseRouteAttendeesItemIdGetProps) =>
  useGet<
    AttendeeRead,
    HTTPValidationError,
    void,
    RouteAttendeesItemIdGetPathParams
  >(
    (paramsInPath: RouteAttendeesItemIdGetPathParams) =>
      `/attendees/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteAttendeesItemIdPutPathParams {
  item_id: number;
}

export type RouteAttendeesItemIdPutProps = Omit<
  MutateProps<
    AttendeeRead,
    HTTPValidationError,
    void,
    AttendeeReadUpdate,
    RouteAttendeesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteAttendeesItemIdPutPathParams;

/**
 * Update One
 */
export const RouteAttendeesItemIdPut = ({
  item_id,
  ...props
}: RouteAttendeesItemIdPutProps) => (
  <Mutate<
    AttendeeRead,
    HTTPValidationError,
    void,
    AttendeeReadUpdate,
    RouteAttendeesItemIdPutPathParams
  >
    verb="PUT"
    path={`/attendees/${item_id}`}
    {...props}
  />
);

export type UseRouteAttendeesItemIdPutProps = Omit<
  UseMutateProps<
    AttendeeRead,
    HTTPValidationError,
    void,
    AttendeeReadUpdate,
    RouteAttendeesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteAttendeesItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteAttendeesItemIdPut = ({
  item_id,
  ...props
}: UseRouteAttendeesItemIdPutProps) =>
  useMutate<
    AttendeeRead,
    HTTPValidationError,
    void,
    AttendeeReadUpdate,
    RouteAttendeesItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteAttendeesItemIdPutPathParams) =>
      `/attendees/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteAttendeesItemIdDeleteProps = Omit<
  MutateProps<AttendeeRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteAttendeesItemIdDelete = (
  props: RouteAttendeesItemIdDeleteProps
) => (
  <Mutate<AttendeeRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/attendees`}
    {...props}
  />
);

export type UseRouteAttendeesItemIdDeleteProps = Omit<
  UseMutateProps<AttendeeRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteAttendeesItemIdDelete = (
  props: UseRouteAttendeesItemIdDeleteProps
) =>
  useMutate<AttendeeRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/attendees`,
    { ...props }
  );

export interface RouteRolesGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RouteRolesGetProps = Omit<
  GetProps<RoleRead[], HTTPValidationError, RouteRolesGetQueryParams, void>,
  "path"
>;

/**
 * Get All
 */
export const RouteRolesGet = (props: RouteRolesGetProps) => (
  <Get<RoleRead[], HTTPValidationError, RouteRolesGetQueryParams, void>
    path={`/roles`}
    {...props}
  />
);

export type UseRouteRolesGetProps = Omit<
  UseGetProps<RoleRead[], HTTPValidationError, RouteRolesGetQueryParams, void>,
  "path"
>;

/**
 * Get All
 */
export const useRouteRolesGet = (props: UseRouteRolesGetProps) =>
  useGet<RoleRead[], HTTPValidationError, RouteRolesGetQueryParams, void>(
    `/roles`,
    props
  );

export type RouteRolesPostProps = Omit<
  MutateProps<RoleRead, HTTPValidationError, void, RoleCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RouteRolesPost = (props: RouteRolesPostProps) => (
  <Mutate<RoleRead, HTTPValidationError, void, RoleCreate, void>
    verb="POST"
    path={`/roles`}
    {...props}
  />
);

export type UseRouteRolesPostProps = Omit<
  UseMutateProps<RoleRead, HTTPValidationError, void, RoleCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRouteRolesPost = (props: UseRouteRolesPostProps) =>
  useMutate<RoleRead, HTTPValidationError, void, RoleCreate, void>(
    "POST",
    `/roles`,
    props
  );

export type RouteRolesDeleteProps = Omit<
  MutateProps<RoleRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteRolesDelete = (props: RouteRolesDeleteProps) => (
  <Mutate<RoleRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/roles`}
    {...props}
  />
);

export type UseRouteRolesDeleteProps = Omit<
  UseMutateProps<RoleRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteRolesDelete = (props: UseRouteRolesDeleteProps) =>
  useMutate<RoleRead[], unknown, void, void, void>("DELETE", `/roles`, {
    ...props,
  });

export interface RouteRolesItemIdGetPathParams {
  item_id: number;
}

export type RouteRolesItemIdGetProps = Omit<
  GetProps<RoleRead, HTTPValidationError, void, RouteRolesItemIdGetPathParams>,
  "path"
> &
  RouteRolesItemIdGetPathParams;

/**
 * Get One
 */
export const RouteRolesItemIdGet = ({
  item_id,
  ...props
}: RouteRolesItemIdGetProps) => (
  <Get<RoleRead, HTTPValidationError, void, RouteRolesItemIdGetPathParams>
    path={`/roles/${item_id}`}
    {...props}
  />
);

export type UseRouteRolesItemIdGetProps = Omit<
  UseGetProps<
    RoleRead,
    HTTPValidationError,
    void,
    RouteRolesItemIdGetPathParams
  >,
  "path"
> &
  RouteRolesItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteRolesItemIdGet = ({
  item_id,
  ...props
}: UseRouteRolesItemIdGetProps) =>
  useGet<RoleRead, HTTPValidationError, void, RouteRolesItemIdGetPathParams>(
    (paramsInPath: RouteRolesItemIdGetPathParams) =>
      `/roles/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteRolesItemIdPutPathParams {
  item_id: number;
}

export type RouteRolesItemIdPutProps = Omit<
  MutateProps<
    RoleRead,
    HTTPValidationError,
    void,
    RoleReadUpdate,
    RouteRolesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteRolesItemIdPutPathParams;

/**
 * Update One
 */
export const RouteRolesItemIdPut = ({
  item_id,
  ...props
}: RouteRolesItemIdPutProps) => (
  <Mutate<
    RoleRead,
    HTTPValidationError,
    void,
    RoleReadUpdate,
    RouteRolesItemIdPutPathParams
  >
    verb="PUT"
    path={`/roles/${item_id}`}
    {...props}
  />
);

export type UseRouteRolesItemIdPutProps = Omit<
  UseMutateProps<
    RoleRead,
    HTTPValidationError,
    void,
    RoleReadUpdate,
    RouteRolesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteRolesItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteRolesItemIdPut = ({
  item_id,
  ...props
}: UseRouteRolesItemIdPutProps) =>
  useMutate<
    RoleRead,
    HTTPValidationError,
    void,
    RoleReadUpdate,
    RouteRolesItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteRolesItemIdPutPathParams) =>
      `/roles/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteRolesItemIdDeleteProps = Omit<
  MutateProps<RoleRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteRolesItemIdDelete = (props: RouteRolesItemIdDeleteProps) => (
  <Mutate<RoleRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/roles`}
    {...props}
  />
);

export type UseRouteRolesItemIdDeleteProps = Omit<
  UseMutateProps<RoleRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteRolesItemIdDelete = (
  props: UseRouteRolesItemIdDeleteProps
) =>
  useMutate<RoleRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/roles`,
    { ...props }
  );

export interface RouteLanguagesGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RouteLanguagesGetProps = Omit<
  GetProps<
    LanguageRead[],
    HTTPValidationError,
    RouteLanguagesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const RouteLanguagesGet = (props: RouteLanguagesGetProps) => (
  <Get<LanguageRead[], HTTPValidationError, RouteLanguagesGetQueryParams, void>
    path={`/languages`}
    {...props}
  />
);

export type UseRouteLanguagesGetProps = Omit<
  UseGetProps<
    LanguageRead[],
    HTTPValidationError,
    RouteLanguagesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const useRouteLanguagesGet = (props: UseRouteLanguagesGetProps) =>
  useGet<
    LanguageRead[],
    HTTPValidationError,
    RouteLanguagesGetQueryParams,
    void
  >(`/languages`, props);

export type RouteLanguagesPostProps = Omit<
  MutateProps<LanguageRead, HTTPValidationError, void, LanguageCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RouteLanguagesPost = (props: RouteLanguagesPostProps) => (
  <Mutate<LanguageRead, HTTPValidationError, void, LanguageCreate, void>
    verb="POST"
    path={`/languages`}
    {...props}
  />
);

export type UseRouteLanguagesPostProps = Omit<
  UseMutateProps<LanguageRead, HTTPValidationError, void, LanguageCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRouteLanguagesPost = (props: UseRouteLanguagesPostProps) =>
  useMutate<LanguageRead, HTTPValidationError, void, LanguageCreate, void>(
    "POST",
    `/languages`,
    props
  );

export type RouteLanguagesDeleteProps = Omit<
  MutateProps<LanguageRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteLanguagesDelete = (props: RouteLanguagesDeleteProps) => (
  <Mutate<LanguageRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/languages`}
    {...props}
  />
);

export type UseRouteLanguagesDeleteProps = Omit<
  UseMutateProps<LanguageRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteLanguagesDelete = (props: UseRouteLanguagesDeleteProps) =>
  useMutate<LanguageRead[], unknown, void, void, void>("DELETE", `/languages`, {
    ...props,
  });

export interface RouteLanguagesItemIdGetPathParams {
  item_id: number;
}

export type RouteLanguagesItemIdGetProps = Omit<
  GetProps<
    LanguageRead,
    HTTPValidationError,
    void,
    RouteLanguagesItemIdGetPathParams
  >,
  "path"
> &
  RouteLanguagesItemIdGetPathParams;

/**
 * Get One
 */
export const RouteLanguagesItemIdGet = ({
  item_id,
  ...props
}: RouteLanguagesItemIdGetProps) => (
  <Get<
    LanguageRead,
    HTTPValidationError,
    void,
    RouteLanguagesItemIdGetPathParams
  >
    path={`/languages/${item_id}`}
    {...props}
  />
);

export type UseRouteLanguagesItemIdGetProps = Omit<
  UseGetProps<
    LanguageRead,
    HTTPValidationError,
    void,
    RouteLanguagesItemIdGetPathParams
  >,
  "path"
> &
  RouteLanguagesItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteLanguagesItemIdGet = ({
  item_id,
  ...props
}: UseRouteLanguagesItemIdGetProps) =>
  useGet<
    LanguageRead,
    HTTPValidationError,
    void,
    RouteLanguagesItemIdGetPathParams
  >(
    (paramsInPath: RouteLanguagesItemIdGetPathParams) =>
      `/languages/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteLanguagesItemIdPutPathParams {
  item_id: number;
}

export type RouteLanguagesItemIdPutProps = Omit<
  MutateProps<
    LanguageRead,
    HTTPValidationError,
    void,
    LanguageReadUpdate,
    RouteLanguagesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteLanguagesItemIdPutPathParams;

/**
 * Update One
 */
export const RouteLanguagesItemIdPut = ({
  item_id,
  ...props
}: RouteLanguagesItemIdPutProps) => (
  <Mutate<
    LanguageRead,
    HTTPValidationError,
    void,
    LanguageReadUpdate,
    RouteLanguagesItemIdPutPathParams
  >
    verb="PUT"
    path={`/languages/${item_id}`}
    {...props}
  />
);

export type UseRouteLanguagesItemIdPutProps = Omit<
  UseMutateProps<
    LanguageRead,
    HTTPValidationError,
    void,
    LanguageReadUpdate,
    RouteLanguagesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteLanguagesItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteLanguagesItemIdPut = ({
  item_id,
  ...props
}: UseRouteLanguagesItemIdPutProps) =>
  useMutate<
    LanguageRead,
    HTTPValidationError,
    void,
    LanguageReadUpdate,
    RouteLanguagesItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteLanguagesItemIdPutPathParams) =>
      `/languages/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteLanguagesItemIdDeleteProps = Omit<
  MutateProps<LanguageRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteLanguagesItemIdDelete = (
  props: RouteLanguagesItemIdDeleteProps
) => (
  <Mutate<LanguageRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/languages`}
    {...props}
  />
);

export type UseRouteLanguagesItemIdDeleteProps = Omit<
  UseMutateProps<LanguageRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteLanguagesItemIdDelete = (
  props: UseRouteLanguagesItemIdDeleteProps
) =>
  useMutate<LanguageRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/languages`,
    { ...props }
  );

export interface RouteLanguagecategoriesGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RouteLanguagecategoriesGetProps = Omit<
  GetProps<
    LanguageCategoryRead[],
    HTTPValidationError,
    RouteLanguagecategoriesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const RouteLanguagecategoriesGet = (
  props: RouteLanguagecategoriesGetProps
) => (
  <Get<
    LanguageCategoryRead[],
    HTTPValidationError,
    RouteLanguagecategoriesGetQueryParams,
    void
  >
    path={`/languagecategories`}
    {...props}
  />
);

export type UseRouteLanguagecategoriesGetProps = Omit<
  UseGetProps<
    LanguageCategoryRead[],
    HTTPValidationError,
    RouteLanguagecategoriesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const useRouteLanguagecategoriesGet = (
  props: UseRouteLanguagecategoriesGetProps
) =>
  useGet<
    LanguageCategoryRead[],
    HTTPValidationError,
    RouteLanguagecategoriesGetQueryParams,
    void
  >(`/languagecategories`, props);

export type RouteLanguagecategoriesPostProps = Omit<
  MutateProps<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryCreate,
    void
  >,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RouteLanguagecategoriesPost = (
  props: RouteLanguagecategoriesPostProps
) => (
  <Mutate<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryCreate,
    void
  >
    verb="POST"
    path={`/languagecategories`}
    {...props}
  />
);

export type UseRouteLanguagecategoriesPostProps = Omit<
  UseMutateProps<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryCreate,
    void
  >,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRouteLanguagecategoriesPost = (
  props: UseRouteLanguagecategoriesPostProps
) =>
  useMutate<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryCreate,
    void
  >("POST", `/languagecategories`, props);

export type RouteLanguagecategoriesDeleteProps = Omit<
  MutateProps<LanguageCategoryRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteLanguagecategoriesDelete = (
  props: RouteLanguagecategoriesDeleteProps
) => (
  <Mutate<LanguageCategoryRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/languagecategories`}
    {...props}
  />
);

export type UseRouteLanguagecategoriesDeleteProps = Omit<
  UseMutateProps<LanguageCategoryRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteLanguagecategoriesDelete = (
  props: UseRouteLanguagecategoriesDeleteProps
) =>
  useMutate<LanguageCategoryRead[], unknown, void, void, void>(
    "DELETE",
    `/languagecategories`,
    { ...props }
  );

export interface RouteLanguagecategoriesItemIdGetPathParams {
  item_id: number;
}

export type RouteLanguagecategoriesItemIdGetProps = Omit<
  GetProps<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    RouteLanguagecategoriesItemIdGetPathParams
  >,
  "path"
> &
  RouteLanguagecategoriesItemIdGetPathParams;

/**
 * Get One
 */
export const RouteLanguagecategoriesItemIdGet = ({
  item_id,
  ...props
}: RouteLanguagecategoriesItemIdGetProps) => (
  <Get<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    RouteLanguagecategoriesItemIdGetPathParams
  >
    path={`/languagecategories/${item_id}`}
    {...props}
  />
);

export type UseRouteLanguagecategoriesItemIdGetProps = Omit<
  UseGetProps<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    RouteLanguagecategoriesItemIdGetPathParams
  >,
  "path"
> &
  RouteLanguagecategoriesItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteLanguagecategoriesItemIdGet = ({
  item_id,
  ...props
}: UseRouteLanguagecategoriesItemIdGetProps) =>
  useGet<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    RouteLanguagecategoriesItemIdGetPathParams
  >(
    (paramsInPath: RouteLanguagecategoriesItemIdGetPathParams) =>
      `/languagecategories/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteLanguagecategoriesItemIdPutPathParams {
  item_id: number;
}

export type RouteLanguagecategoriesItemIdPutProps = Omit<
  MutateProps<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryReadUpdate,
    RouteLanguagecategoriesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteLanguagecategoriesItemIdPutPathParams;

/**
 * Update One
 */
export const RouteLanguagecategoriesItemIdPut = ({
  item_id,
  ...props
}: RouteLanguagecategoriesItemIdPutProps) => (
  <Mutate<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryReadUpdate,
    RouteLanguagecategoriesItemIdPutPathParams
  >
    verb="PUT"
    path={`/languagecategories/${item_id}`}
    {...props}
  />
);

export type UseRouteLanguagecategoriesItemIdPutProps = Omit<
  UseMutateProps<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryReadUpdate,
    RouteLanguagecategoriesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteLanguagecategoriesItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteLanguagecategoriesItemIdPut = ({
  item_id,
  ...props
}: UseRouteLanguagecategoriesItemIdPutProps) =>
  useMutate<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryReadUpdate,
    RouteLanguagecategoriesItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteLanguagecategoriesItemIdPutPathParams) =>
      `/languagecategories/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteLanguagecategoriesItemIdDeleteProps = Omit<
  MutateProps<LanguageCategoryRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteLanguagecategoriesItemIdDelete = (
  props: RouteLanguagecategoriesItemIdDeleteProps
) => (
  <Mutate<LanguageCategoryRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/languagecategories`}
    {...props}
  />
);

export type UseRouteLanguagecategoriesItemIdDeleteProps = Omit<
  UseMutateProps<LanguageCategoryRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteLanguagecategoriesItemIdDelete = (
  props: UseRouteLanguagecategoriesItemIdDeleteProps
) =>
  useMutate<LanguageCategoryRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/languagecategories`,
    { ...props }
  );
