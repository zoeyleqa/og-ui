/* Generated by restful-react */

import React from "react";
import {
  Get,
  GetProps,
  useGet,
  UseGetProps,
  Mutate,
  MutateProps,
  useMutate,
  UseMutateProps,
} from "restful-react";
export const SPEC_VERSION = "0.1.0";
export interface AttendeeCreate {
  first_name: string;
  middle_name: string;
  last_name: string;
  nick_name: string;
  suffix: string;
  sex: string;
  email: string;
  street: string;
  city: string;
  state: string;
  country_code: string;
  status: string;
  is_us_citizen: boolean;
}

export interface AttendeeRead {
  first_name: string;
  middle_name: string;
  last_name: string;
  nick_name: string;
  suffix: string;
  sex: string;
  email: string;
  street: string;
  city: string;
  state: string;
  country_code: string;
  status: string;
  is_us_citizen: boolean;
  id: number;
  langs?: LanguageCreate[];
  lang_cats?: LanguageCategoryCreate[];
  attendee_roles?: RoleCreate[];
}

export interface AttendeeReadUpdate {
  first_name: string;
  middle_name: string;
  last_name: string;
  nick_name: string;
  suffix: string;
  sex: string;
  email: string;
  street: string;
  city: string;
  state: string;
  country_code: string;
  status: string;
  is_us_citizen: boolean;
  langs: LanguageCreate;
  lang_cats: LanguageCategoryCreate;
  attendee_roles: RoleCreate;
}

export interface BodyLoginLoginPost {
  grant_type?: string;
  username: string;
  password: string;
  scope?: string;
  client_id?: string;
  client_secret?: string;
}

export interface EventCreate {
  name: string;
  open_at: string;
  start_at: string;
  end_at: string;
  infil_suspend_at: string;
  exfil_suspend_at: string;
  po_suspend_at: string;
  final_suspend_at: string;
  allow_override_dates: boolean;
  SubGroupId: number;
  event_exercise?: ExerciseCreate;
}

export interface EventRead {
  name: string;
  open_at: string;
  start_at: string;
  end_at: string;
  infil_suspend_at: string;
  exfil_suspend_at: string;
  po_suspend_at: string;
  final_suspend_at: string;
  allow_override_dates: boolean;
  SubGroupId: number;
  event_exercise?: ExerciseCreate;
  id: number;
}

export interface EventReadUpdate {
  name: string;
  open_at: string;
  start_at: string;
  end_at: string;
  infil_suspend_at: string;
  exfil_suspend_at: string;
  po_suspend_at: string;
  final_suspend_at: string;
  allow_override_dates: boolean;
  SubGroupId: number;
  event_exercise: ExerciseCreate;
}

export interface ExerciseCreate {
  name: string;
  description?: string;
  background_color: string;
  text_color: string;
  group_id: number;
  group?: GroupCreate;
}

export interface ExerciseNameRead {
  id: number;
  name: string;
}

export interface ExerciseRead {
  name: string;
  description?: string;
  background_color: string;
  text_color: string;
  group_id: number;
  group?: GroupCreate;
  id: number;
}

export interface ExerciseReadUpdate {
  name: string;
  description: string;
  background_color: string;
  text_color: string;
  group_id: number;
  group: GroupCreate;
}

export interface GroupCreate {
  name: string;
  unit: string;
  lead_one: string;
  lead_two: string;
}

export interface GroupRead {
  name: string;
  unit: string;
  lead_one: string;
  lead_two: string;
  id: number;
}

export interface GroupReadUpdate {
  name: string;
  unit: string;
  lead_one: string;
  lead_two: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface LanguageCategoryCreate {
  name: string;
  description?: string;
}

export interface LanguageCategoryRead {
  name: string;
  description?: string;
  id: number;
}

export interface LanguageCategoryReadUpdate {
  name: string;
  description: string;
}

export interface LanguageCreate {
  name: string;
  comment?: string;
}

export interface LanguageRead {
  name: string;
  comment?: string;
  id: number;
}

export interface LanguageReadUpdate {
  name: string;
  comment: string;
}

export interface PermissionTagCreate {
  tag: string;
}

export interface PermissionTagRead {
  tag: string;
  id: number;
}

export interface PermissionTagReadUpdate {
  tag: string;
}

export interface RoleCreate {
  name: string;
  description: string;
  pay: number;
}

export interface RoleRead {
  name: string;
  description: string;
  pay: number;
  id: number;
}

export interface RoleReadUpdate {
  name: string;
  description: string;
  pay: number;
}

export interface SiteCreate {
  name: string;
  description: string;
  country: string;
  city: string;
  state: string;
  latitude: number;
  latitude_min: number;
  latitude_sec: number;
  longitude: number;
  longitude_min: number;
  longitude_sec: number;
}

export interface SiteRead {
  name: string;
  description: string;
  country: string;
  city: string;
  state: string;
  latitude: number;
  latitude_min: number;
  latitude_sec: number;
  longitude: number;
  longitude_min: number;
  longitude_sec: number;
  id: number;
}

export interface SiteReadUpdate {
  name: string;
  description: string;
  country: string;
  city: string;
  state: string;
  latitude: number;
  latitude_min: number;
  latitude_sec: number;
  longitude: number;
  longitude_min: number;
  longitude_sec: number;
}

export interface Token {
  access_token: string;
  token_type: string;
}

export interface UserCreate {
  username: string;
  first_name: string;
  last_name: string;
  email: string;
  password: string;
  admin?: boolean;
}

export interface UserRead {
  username: string;
  first_name: string;
  last_name: string;
  email: string;
  password: string;
  admin?: boolean;
  id: number;
  last_sign_in: string;
  user_access_rights?: UserTagPermLinkRead[];
  user_exercises?: ExerciseNameRead[];
}

export interface UserReadUpdate {
  username: string;
  first_name: string;
  last_name: string;
  email: string;
  password: string;
  admin: boolean;
  id: number;
  last_sign_in: string;
  user_access_rights: UserTagPermLinkRead;
  user_exercises: ExerciseNameRead;
}

export interface UserTagPermLinkRead {
  tag: string;
  access_rights: string;
  id: number;
  hr_id: number;
}

export interface ValidationError {
  loc: string[];
  msg: string;
  type: string;
}

export type LoginLoginPostProps = Omit<
  MutateProps<Token, HTTPValidationError, void, void, void>,
  "path" | "verb"
>;

/**
 * Login
 */
export const LoginLoginPost = (props: LoginLoginPostProps) => (
  <Mutate<Token, HTTPValidationError, void, void, void>
    verb="POST"
    path={`/login`}
    {...props}
  />
);

export type UseLoginLoginPostProps = Omit<
  UseMutateProps<Token, HTTPValidationError, void, void, void>,
  "path" | "verb"
>;

/**
 * Login
 */
export const useLoginLoginPost = (props: UseLoginLoginPostProps) =>
  useMutate<Token, HTTPValidationError, void, void, void>(
    "POST",
    `/login`,
    props
  );

export type GetAllUsersGetProps = Omit<
  GetProps<UserRead[], unknown, void, void>,
  "path"
>;

/**
 * Get All
 */
export const GetAllUsersGet = (props: GetAllUsersGetProps) => (
  <Get<UserRead[], unknown, void, void> path={`/users`} {...props} />
);

export type UseGetAllUsersGetProps = Omit<
  UseGetProps<UserRead[], unknown, void, void>,
  "path"
>;

/**
 * Get All
 */
export const useGetAllUsersGet = (props: UseGetAllUsersGetProps) =>
  useGet<UserRead[], unknown, void, void>(`/users`, props);

export type CreateUsersPostProps = Omit<
  MutateProps<UserRead, HTTPValidationError, void, UserCreate, void>,
  "path" | "verb"
>;

/**
 * Create
 */
export const CreateUsersPost = (props: CreateUsersPostProps) => (
  <Mutate<UserRead, HTTPValidationError, void, UserCreate, void>
    verb="POST"
    path={`/users`}
    {...props}
  />
);

export type UseCreateUsersPostProps = Omit<
  UseMutateProps<UserRead, HTTPValidationError, void, UserCreate, void>,
  "path" | "verb"
>;

/**
 * Create
 */
export const useCreateUsersPost = (props: UseCreateUsersPostProps) =>
  useMutate<UserRead, HTTPValidationError, void, UserCreate, void>(
    "POST",
    `/users`,
    props
  );

export type RouteUsersDeleteProps = Omit<
  MutateProps<UserRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteUsersDelete = (props: RouteUsersDeleteProps) => (
  <Mutate<UserRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/users`}
    {...props}
  />
);

export type UseRouteUsersDeleteProps = Omit<
  UseMutateProps<UserRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteUsersDelete = (props: UseRouteUsersDeleteProps) =>
  useMutate<UserRead[], unknown, void, void, void>("DELETE", `/users`, {
    ...props,
  });

export interface RouteUsersItemIdGetPathParams {
  item_id: number;
}

export type RouteUsersItemIdGetProps = Omit<
  GetProps<UserRead, HTTPValidationError, void, RouteUsersItemIdGetPathParams>,
  "path"
> &
  RouteUsersItemIdGetPathParams;

/**
 * Get One
 */
export const RouteUsersItemIdGet = ({
  item_id,
  ...props
}: RouteUsersItemIdGetProps) => (
  <Get<UserRead, HTTPValidationError, void, RouteUsersItemIdGetPathParams>
    path={`/users/${item_id}`}
    {...props}
  />
);

export type UseRouteUsersItemIdGetProps = Omit<
  UseGetProps<
    UserRead,
    HTTPValidationError,
    void,
    RouteUsersItemIdGetPathParams
  >,
  "path"
> &
  RouteUsersItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteUsersItemIdGet = ({
  item_id,
  ...props
}: UseRouteUsersItemIdGetProps) =>
  useGet<UserRead, HTTPValidationError, void, RouteUsersItemIdGetPathParams>(
    (paramsInPath: RouteUsersItemIdGetPathParams) =>
      `/users/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteUsersItemIdPutPathParams {
  item_id: number;
}

export type RouteUsersItemIdPutProps = Omit<
  MutateProps<
    UserRead,
    HTTPValidationError,
    void,
    UserReadUpdate,
    RouteUsersItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteUsersItemIdPutPathParams;

/**
 * Update One
 */
export const RouteUsersItemIdPut = ({
  item_id,
  ...props
}: RouteUsersItemIdPutProps) => (
  <Mutate<
    UserRead,
    HTTPValidationError,
    void,
    UserReadUpdate,
    RouteUsersItemIdPutPathParams
  >
    verb="PUT"
    path={`/users/${item_id}`}
    {...props}
  />
);

export type UseRouteUsersItemIdPutProps = Omit<
  UseMutateProps<
    UserRead,
    HTTPValidationError,
    void,
    UserReadUpdate,
    RouteUsersItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteUsersItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteUsersItemIdPut = ({
  item_id,
  ...props
}: UseRouteUsersItemIdPutProps) =>
  useMutate<
    UserRead,
    HTTPValidationError,
    void,
    UserReadUpdate,
    RouteUsersItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteUsersItemIdPutPathParams) =>
      `/users/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteUsersItemIdDeleteProps = Omit<
  MutateProps<UserRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteUsersItemIdDelete = (props: RouteUsersItemIdDeleteProps) => (
  <Mutate<UserRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/users`}
    {...props}
  />
);

export type UseRouteUsersItemIdDeleteProps = Omit<
  UseMutateProps<UserRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteUsersItemIdDelete = (
  props: UseRouteUsersItemIdDeleteProps
) =>
  useMutate<UserRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/users`,
    { ...props }
  );

export interface RouteAttendeesGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RouteAttendeesGetProps = Omit<
  GetProps<
    AttendeeRead[],
    HTTPValidationError,
    RouteAttendeesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const RouteAttendeesGet = (props: RouteAttendeesGetProps) => (
  <Get<AttendeeRead[], HTTPValidationError, RouteAttendeesGetQueryParams, void>
    path={`/attendees`}
    {...props}
  />
);

export type UseRouteAttendeesGetProps = Omit<
  UseGetProps<
    AttendeeRead[],
    HTTPValidationError,
    RouteAttendeesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const useRouteAttendeesGet = (props: UseRouteAttendeesGetProps) =>
  useGet<
    AttendeeRead[],
    HTTPValidationError,
    RouteAttendeesGetQueryParams,
    void
  >(`/attendees`, props);

export type RouteAttendeesPostProps = Omit<
  MutateProps<AttendeeRead, HTTPValidationError, void, AttendeeCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RouteAttendeesPost = (props: RouteAttendeesPostProps) => (
  <Mutate<AttendeeRead, HTTPValidationError, void, AttendeeCreate, void>
    verb="POST"
    path={`/attendees`}
    {...props}
  />
);

export type UseRouteAttendeesPostProps = Omit<
  UseMutateProps<AttendeeRead, HTTPValidationError, void, AttendeeCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRouteAttendeesPost = (props: UseRouteAttendeesPostProps) =>
  useMutate<AttendeeRead, HTTPValidationError, void, AttendeeCreate, void>(
    "POST",
    `/attendees`,
    props
  );

export type RouteAttendeesDeleteProps = Omit<
  MutateProps<AttendeeRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteAttendeesDelete = (props: RouteAttendeesDeleteProps) => (
  <Mutate<AttendeeRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/attendees`}
    {...props}
  />
);

export type UseRouteAttendeesDeleteProps = Omit<
  UseMutateProps<AttendeeRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteAttendeesDelete = (props: UseRouteAttendeesDeleteProps) =>
  useMutate<AttendeeRead[], unknown, void, void, void>("DELETE", `/attendees`, {
    ...props,
  });

export interface RouteAttendeesItemIdGetPathParams {
  item_id: number;
}

export type RouteAttendeesItemIdGetProps = Omit<
  GetProps<
    AttendeeRead,
    HTTPValidationError,
    void,
    RouteAttendeesItemIdGetPathParams
  >,
  "path"
> &
  RouteAttendeesItemIdGetPathParams;

/**
 * Get One
 */
export const RouteAttendeesItemIdGet = ({
  item_id,
  ...props
}: RouteAttendeesItemIdGetProps) => (
  <Get<
    AttendeeRead,
    HTTPValidationError,
    void,
    RouteAttendeesItemIdGetPathParams
  >
    path={`/attendees/${item_id}`}
    {...props}
  />
);

export type UseRouteAttendeesItemIdGetProps = Omit<
  UseGetProps<
    AttendeeRead,
    HTTPValidationError,
    void,
    RouteAttendeesItemIdGetPathParams
  >,
  "path"
> &
  RouteAttendeesItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteAttendeesItemIdGet = ({
  item_id,
  ...props
}: UseRouteAttendeesItemIdGetProps) =>
  useGet<
    AttendeeRead,
    HTTPValidationError,
    void,
    RouteAttendeesItemIdGetPathParams
  >(
    (paramsInPath: RouteAttendeesItemIdGetPathParams) =>
      `/attendees/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteAttendeesItemIdPutPathParams {
  item_id: number;
}

export type RouteAttendeesItemIdPutProps = Omit<
  MutateProps<
    AttendeeRead,
    HTTPValidationError,
    void,
    AttendeeReadUpdate,
    RouteAttendeesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteAttendeesItemIdPutPathParams;

/**
 * Update One
 */
export const RouteAttendeesItemIdPut = ({
  item_id,
  ...props
}: RouteAttendeesItemIdPutProps) => (
  <Mutate<
    AttendeeRead,
    HTTPValidationError,
    void,
    AttendeeReadUpdate,
    RouteAttendeesItemIdPutPathParams
  >
    verb="PUT"
    path={`/attendees/${item_id}`}
    {...props}
  />
);

export type UseRouteAttendeesItemIdPutProps = Omit<
  UseMutateProps<
    AttendeeRead,
    HTTPValidationError,
    void,
    AttendeeReadUpdate,
    RouteAttendeesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteAttendeesItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteAttendeesItemIdPut = ({
  item_id,
  ...props
}: UseRouteAttendeesItemIdPutProps) =>
  useMutate<
    AttendeeRead,
    HTTPValidationError,
    void,
    AttendeeReadUpdate,
    RouteAttendeesItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteAttendeesItemIdPutPathParams) =>
      `/attendees/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteAttendeesItemIdDeleteProps = Omit<
  MutateProps<AttendeeRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteAttendeesItemIdDelete = (
  props: RouteAttendeesItemIdDeleteProps
) => (
  <Mutate<AttendeeRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/attendees`}
    {...props}
  />
);

export type UseRouteAttendeesItemIdDeleteProps = Omit<
  UseMutateProps<AttendeeRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteAttendeesItemIdDelete = (
  props: UseRouteAttendeesItemIdDeleteProps
) =>
  useMutate<AttendeeRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/attendees`,
    { ...props }
  );

export interface RouteRolesGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RouteRolesGetProps = Omit<
  GetProps<RoleRead[], HTTPValidationError, RouteRolesGetQueryParams, void>,
  "path"
>;

/**
 * Get All
 */
export const RouteRolesGet = (props: RouteRolesGetProps) => (
  <Get<RoleRead[], HTTPValidationError, RouteRolesGetQueryParams, void>
    path={`/roles`}
    {...props}
  />
);

export type UseRouteRolesGetProps = Omit<
  UseGetProps<RoleRead[], HTTPValidationError, RouteRolesGetQueryParams, void>,
  "path"
>;

/**
 * Get All
 */
export const useRouteRolesGet = (props: UseRouteRolesGetProps) =>
  useGet<RoleRead[], HTTPValidationError, RouteRolesGetQueryParams, void>(
    `/roles`,
    props
  );

export type RouteRolesPostProps = Omit<
  MutateProps<RoleRead, HTTPValidationError, void, RoleCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RouteRolesPost = (props: RouteRolesPostProps) => (
  <Mutate<RoleRead, HTTPValidationError, void, RoleCreate, void>
    verb="POST"
    path={`/roles`}
    {...props}
  />
);

export type UseRouteRolesPostProps = Omit<
  UseMutateProps<RoleRead, HTTPValidationError, void, RoleCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRouteRolesPost = (props: UseRouteRolesPostProps) =>
  useMutate<RoleRead, HTTPValidationError, void, RoleCreate, void>(
    "POST",
    `/roles`,
    props
  );

export type RouteRolesDeleteProps = Omit<
  MutateProps<RoleRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteRolesDelete = (props: RouteRolesDeleteProps) => (
  <Mutate<RoleRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/roles`}
    {...props}
  />
);

export type UseRouteRolesDeleteProps = Omit<
  UseMutateProps<RoleRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteRolesDelete = (props: UseRouteRolesDeleteProps) =>
  useMutate<RoleRead[], unknown, void, void, void>("DELETE", `/roles`, {
    ...props,
  });

export interface RouteRolesItemIdGetPathParams {
  item_id: number;
}

export type RouteRolesItemIdGetProps = Omit<
  GetProps<RoleRead, HTTPValidationError, void, RouteRolesItemIdGetPathParams>,
  "path"
> &
  RouteRolesItemIdGetPathParams;

/**
 * Get One
 */
export const RouteRolesItemIdGet = ({
  item_id,
  ...props
}: RouteRolesItemIdGetProps) => (
  <Get<RoleRead, HTTPValidationError, void, RouteRolesItemIdGetPathParams>
    path={`/roles/${item_id}`}
    {...props}
  />
);

export type UseRouteRolesItemIdGetProps = Omit<
  UseGetProps<
    RoleRead,
    HTTPValidationError,
    void,
    RouteRolesItemIdGetPathParams
  >,
  "path"
> &
  RouteRolesItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteRolesItemIdGet = ({
  item_id,
  ...props
}: UseRouteRolesItemIdGetProps) =>
  useGet<RoleRead, HTTPValidationError, void, RouteRolesItemIdGetPathParams>(
    (paramsInPath: RouteRolesItemIdGetPathParams) =>
      `/roles/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteRolesItemIdPutPathParams {
  item_id: number;
}

export type RouteRolesItemIdPutProps = Omit<
  MutateProps<
    RoleRead,
    HTTPValidationError,
    void,
    RoleReadUpdate,
    RouteRolesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteRolesItemIdPutPathParams;

/**
 * Update One
 */
export const RouteRolesItemIdPut = ({
  item_id,
  ...props
}: RouteRolesItemIdPutProps) => (
  <Mutate<
    RoleRead,
    HTTPValidationError,
    void,
    RoleReadUpdate,
    RouteRolesItemIdPutPathParams
  >
    verb="PUT"
    path={`/roles/${item_id}`}
    {...props}
  />
);

export type UseRouteRolesItemIdPutProps = Omit<
  UseMutateProps<
    RoleRead,
    HTTPValidationError,
    void,
    RoleReadUpdate,
    RouteRolesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteRolesItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteRolesItemIdPut = ({
  item_id,
  ...props
}: UseRouteRolesItemIdPutProps) =>
  useMutate<
    RoleRead,
    HTTPValidationError,
    void,
    RoleReadUpdate,
    RouteRolesItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteRolesItemIdPutPathParams) =>
      `/roles/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteRolesItemIdDeleteProps = Omit<
  MutateProps<RoleRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteRolesItemIdDelete = (props: RouteRolesItemIdDeleteProps) => (
  <Mutate<RoleRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/roles`}
    {...props}
  />
);

export type UseRouteRolesItemIdDeleteProps = Omit<
  UseMutateProps<RoleRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteRolesItemIdDelete = (
  props: UseRouteRolesItemIdDeleteProps
) =>
  useMutate<RoleRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/roles`,
    { ...props }
  );

export interface RouteSitesGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RouteSitesGetProps = Omit<
  GetProps<SiteRead[], HTTPValidationError, RouteSitesGetQueryParams, void>,
  "path"
>;

/**
 * Get All
 */
export const RouteSitesGet = (props: RouteSitesGetProps) => (
  <Get<SiteRead[], HTTPValidationError, RouteSitesGetQueryParams, void>
    path={`/sites`}
    {...props}
  />
);

export type UseRouteSitesGetProps = Omit<
  UseGetProps<SiteRead[], HTTPValidationError, RouteSitesGetQueryParams, void>,
  "path"
>;

/**
 * Get All
 */
export const useRouteSitesGet = (props: UseRouteSitesGetProps) =>
  useGet<SiteRead[], HTTPValidationError, RouteSitesGetQueryParams, void>(
    `/sites`,
    props
  );

export type RouteSitesPostProps = Omit<
  MutateProps<SiteRead, HTTPValidationError, void, SiteCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RouteSitesPost = (props: RouteSitesPostProps) => (
  <Mutate<SiteRead, HTTPValidationError, void, SiteCreate, void>
    verb="POST"
    path={`/sites`}
    {...props}
  />
);

export type UseRouteSitesPostProps = Omit<
  UseMutateProps<SiteRead, HTTPValidationError, void, SiteCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRouteSitesPost = (props: UseRouteSitesPostProps) =>
  useMutate<SiteRead, HTTPValidationError, void, SiteCreate, void>(
    "POST",
    `/sites`,
    props
  );

export type RouteSitesDeleteProps = Omit<
  MutateProps<SiteRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteSitesDelete = (props: RouteSitesDeleteProps) => (
  <Mutate<SiteRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/sites`}
    {...props}
  />
);

export type UseRouteSitesDeleteProps = Omit<
  UseMutateProps<SiteRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteSitesDelete = (props: UseRouteSitesDeleteProps) =>
  useMutate<SiteRead[], unknown, void, void, void>("DELETE", `/sites`, {
    ...props,
  });

export interface RouteSitesItemIdGetPathParams {
  item_id: number;
}

export type RouteSitesItemIdGetProps = Omit<
  GetProps<SiteRead, HTTPValidationError, void, RouteSitesItemIdGetPathParams>,
  "path"
> &
  RouteSitesItemIdGetPathParams;

/**
 * Get One
 */
export const RouteSitesItemIdGet = ({
  item_id,
  ...props
}: RouteSitesItemIdGetProps) => (
  <Get<SiteRead, HTTPValidationError, void, RouteSitesItemIdGetPathParams>
    path={`/sites/${item_id}`}
    {...props}
  />
);

export type UseRouteSitesItemIdGetProps = Omit<
  UseGetProps<
    SiteRead,
    HTTPValidationError,
    void,
    RouteSitesItemIdGetPathParams
  >,
  "path"
> &
  RouteSitesItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteSitesItemIdGet = ({
  item_id,
  ...props
}: UseRouteSitesItemIdGetProps) =>
  useGet<SiteRead, HTTPValidationError, void, RouteSitesItemIdGetPathParams>(
    (paramsInPath: RouteSitesItemIdGetPathParams) =>
      `/sites/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteSitesItemIdPutPathParams {
  item_id: number;
}

export type RouteSitesItemIdPutProps = Omit<
  MutateProps<
    SiteRead,
    HTTPValidationError,
    void,
    SiteReadUpdate,
    RouteSitesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteSitesItemIdPutPathParams;

/**
 * Update One
 */
export const RouteSitesItemIdPut = ({
  item_id,
  ...props
}: RouteSitesItemIdPutProps) => (
  <Mutate<
    SiteRead,
    HTTPValidationError,
    void,
    SiteReadUpdate,
    RouteSitesItemIdPutPathParams
  >
    verb="PUT"
    path={`/sites/${item_id}`}
    {...props}
  />
);

export type UseRouteSitesItemIdPutProps = Omit<
  UseMutateProps<
    SiteRead,
    HTTPValidationError,
    void,
    SiteReadUpdate,
    RouteSitesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteSitesItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteSitesItemIdPut = ({
  item_id,
  ...props
}: UseRouteSitesItemIdPutProps) =>
  useMutate<
    SiteRead,
    HTTPValidationError,
    void,
    SiteReadUpdate,
    RouteSitesItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteSitesItemIdPutPathParams) =>
      `/sites/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteSitesItemIdDeleteProps = Omit<
  MutateProps<SiteRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteSitesItemIdDelete = (props: RouteSitesItemIdDeleteProps) => (
  <Mutate<SiteRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/sites`}
    {...props}
  />
);

export type UseRouteSitesItemIdDeleteProps = Omit<
  UseMutateProps<SiteRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteSitesItemIdDelete = (
  props: UseRouteSitesItemIdDeleteProps
) =>
  useMutate<SiteRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/sites`,
    { ...props }
  );

export interface RouteEventsGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RouteEventsGetProps = Omit<
  GetProps<EventRead[], HTTPValidationError, RouteEventsGetQueryParams, void>,
  "path"
>;

/**
 * Get All
 */
export const RouteEventsGet = (props: RouteEventsGetProps) => (
  <Get<EventRead[], HTTPValidationError, RouteEventsGetQueryParams, void>
    path={`/events`}
    {...props}
  />
);

export type UseRouteEventsGetProps = Omit<
  UseGetProps<
    EventRead[],
    HTTPValidationError,
    RouteEventsGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const useRouteEventsGet = (props: UseRouteEventsGetProps) =>
  useGet<EventRead[], HTTPValidationError, RouteEventsGetQueryParams, void>(
    `/events`,
    props
  );

export type RouteEventsPostProps = Omit<
  MutateProps<EventRead, HTTPValidationError, void, EventCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RouteEventsPost = (props: RouteEventsPostProps) => (
  <Mutate<EventRead, HTTPValidationError, void, EventCreate, void>
    verb="POST"
    path={`/events`}
    {...props}
  />
);

export type UseRouteEventsPostProps = Omit<
  UseMutateProps<EventRead, HTTPValidationError, void, EventCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRouteEventsPost = (props: UseRouteEventsPostProps) =>
  useMutate<EventRead, HTTPValidationError, void, EventCreate, void>(
    "POST",
    `/events`,
    props
  );

export type RouteEventsDeleteProps = Omit<
  MutateProps<EventRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteEventsDelete = (props: RouteEventsDeleteProps) => (
  <Mutate<EventRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/events`}
    {...props}
  />
);

export type UseRouteEventsDeleteProps = Omit<
  UseMutateProps<EventRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteEventsDelete = (props: UseRouteEventsDeleteProps) =>
  useMutate<EventRead[], unknown, void, void, void>("DELETE", `/events`, {
    ...props,
  });

export interface RouteEventsItemIdGetPathParams {
  item_id: number;
}

export type RouteEventsItemIdGetProps = Omit<
  GetProps<
    EventRead,
    HTTPValidationError,
    void,
    RouteEventsItemIdGetPathParams
  >,
  "path"
> &
  RouteEventsItemIdGetPathParams;

/**
 * Get One
 */
export const RouteEventsItemIdGet = ({
  item_id,
  ...props
}: RouteEventsItemIdGetProps) => (
  <Get<EventRead, HTTPValidationError, void, RouteEventsItemIdGetPathParams>
    path={`/events/${item_id}`}
    {...props}
  />
);

export type UseRouteEventsItemIdGetProps = Omit<
  UseGetProps<
    EventRead,
    HTTPValidationError,
    void,
    RouteEventsItemIdGetPathParams
  >,
  "path"
> &
  RouteEventsItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteEventsItemIdGet = ({
  item_id,
  ...props
}: UseRouteEventsItemIdGetProps) =>
  useGet<EventRead, HTTPValidationError, void, RouteEventsItemIdGetPathParams>(
    (paramsInPath: RouteEventsItemIdGetPathParams) =>
      `/events/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteEventsItemIdPutPathParams {
  item_id: number;
}

export type RouteEventsItemIdPutProps = Omit<
  MutateProps<
    EventRead,
    HTTPValidationError,
    void,
    EventReadUpdate,
    RouteEventsItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteEventsItemIdPutPathParams;

/**
 * Update One
 */
export const RouteEventsItemIdPut = ({
  item_id,
  ...props
}: RouteEventsItemIdPutProps) => (
  <Mutate<
    EventRead,
    HTTPValidationError,
    void,
    EventReadUpdate,
    RouteEventsItemIdPutPathParams
  >
    verb="PUT"
    path={`/events/${item_id}`}
    {...props}
  />
);

export type UseRouteEventsItemIdPutProps = Omit<
  UseMutateProps<
    EventRead,
    HTTPValidationError,
    void,
    EventReadUpdate,
    RouteEventsItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteEventsItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteEventsItemIdPut = ({
  item_id,
  ...props
}: UseRouteEventsItemIdPutProps) =>
  useMutate<
    EventRead,
    HTTPValidationError,
    void,
    EventReadUpdate,
    RouteEventsItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteEventsItemIdPutPathParams) =>
      `/events/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteEventsItemIdDeleteProps = Omit<
  MutateProps<EventRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteEventsItemIdDelete = (
  props: RouteEventsItemIdDeleteProps
) => (
  <Mutate<EventRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/events`}
    {...props}
  />
);

export type UseRouteEventsItemIdDeleteProps = Omit<
  UseMutateProps<EventRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteEventsItemIdDelete = (
  props: UseRouteEventsItemIdDeleteProps
) =>
  useMutate<EventRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/events`,
    { ...props }
  );

export interface RouteExercisesGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RouteExercisesGetProps = Omit<
  GetProps<
    ExerciseRead[],
    HTTPValidationError,
    RouteExercisesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const RouteExercisesGet = (props: RouteExercisesGetProps) => (
  <Get<ExerciseRead[], HTTPValidationError, RouteExercisesGetQueryParams, void>
    path={`/exercises`}
    {...props}
  />
);

export type UseRouteExercisesGetProps = Omit<
  UseGetProps<
    ExerciseRead[],
    HTTPValidationError,
    RouteExercisesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const useRouteExercisesGet = (props: UseRouteExercisesGetProps) =>
  useGet<
    ExerciseRead[],
    HTTPValidationError,
    RouteExercisesGetQueryParams,
    void
  >(`/exercises`, props);

export type RouteExercisesPostProps = Omit<
  MutateProps<ExerciseRead, HTTPValidationError, void, ExerciseCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RouteExercisesPost = (props: RouteExercisesPostProps) => (
  <Mutate<ExerciseRead, HTTPValidationError, void, ExerciseCreate, void>
    verb="POST"
    path={`/exercises`}
    {...props}
  />
);

export type UseRouteExercisesPostProps = Omit<
  UseMutateProps<ExerciseRead, HTTPValidationError, void, ExerciseCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRouteExercisesPost = (props: UseRouteExercisesPostProps) =>
  useMutate<ExerciseRead, HTTPValidationError, void, ExerciseCreate, void>(
    "POST",
    `/exercises`,
    props
  );

export type RouteExercisesDeleteProps = Omit<
  MutateProps<ExerciseRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteExercisesDelete = (props: RouteExercisesDeleteProps) => (
  <Mutate<ExerciseRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/exercises`}
    {...props}
  />
);

export type UseRouteExercisesDeleteProps = Omit<
  UseMutateProps<ExerciseRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteExercisesDelete = (props: UseRouteExercisesDeleteProps) =>
  useMutate<ExerciseRead[], unknown, void, void, void>("DELETE", `/exercises`, {
    ...props,
  });

export interface RouteExercisesItemIdGetPathParams {
  item_id: number;
}

export type RouteExercisesItemIdGetProps = Omit<
  GetProps<
    ExerciseRead,
    HTTPValidationError,
    void,
    RouteExercisesItemIdGetPathParams
  >,
  "path"
> &
  RouteExercisesItemIdGetPathParams;

/**
 * Get One
 */
export const RouteExercisesItemIdGet = ({
  item_id,
  ...props
}: RouteExercisesItemIdGetProps) => (
  <Get<
    ExerciseRead,
    HTTPValidationError,
    void,
    RouteExercisesItemIdGetPathParams
  >
    path={`/exercises/${item_id}`}
    {...props}
  />
);

export type UseRouteExercisesItemIdGetProps = Omit<
  UseGetProps<
    ExerciseRead,
    HTTPValidationError,
    void,
    RouteExercisesItemIdGetPathParams
  >,
  "path"
> &
  RouteExercisesItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteExercisesItemIdGet = ({
  item_id,
  ...props
}: UseRouteExercisesItemIdGetProps) =>
  useGet<
    ExerciseRead,
    HTTPValidationError,
    void,
    RouteExercisesItemIdGetPathParams
  >(
    (paramsInPath: RouteExercisesItemIdGetPathParams) =>
      `/exercises/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteExercisesItemIdPutPathParams {
  item_id: number;
}

export type RouteExercisesItemIdPutProps = Omit<
  MutateProps<
    ExerciseRead,
    HTTPValidationError,
    void,
    ExerciseReadUpdate,
    RouteExercisesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteExercisesItemIdPutPathParams;

/**
 * Update One
 */
export const RouteExercisesItemIdPut = ({
  item_id,
  ...props
}: RouteExercisesItemIdPutProps) => (
  <Mutate<
    ExerciseRead,
    HTTPValidationError,
    void,
    ExerciseReadUpdate,
    RouteExercisesItemIdPutPathParams
  >
    verb="PUT"
    path={`/exercises/${item_id}`}
    {...props}
  />
);

export type UseRouteExercisesItemIdPutProps = Omit<
  UseMutateProps<
    ExerciseRead,
    HTTPValidationError,
    void,
    ExerciseReadUpdate,
    RouteExercisesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteExercisesItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteExercisesItemIdPut = ({
  item_id,
  ...props
}: UseRouteExercisesItemIdPutProps) =>
  useMutate<
    ExerciseRead,
    HTTPValidationError,
    void,
    ExerciseReadUpdate,
    RouteExercisesItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteExercisesItemIdPutPathParams) =>
      `/exercises/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteExercisesItemIdDeleteProps = Omit<
  MutateProps<ExerciseRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteExercisesItemIdDelete = (
  props: RouteExercisesItemIdDeleteProps
) => (
  <Mutate<ExerciseRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/exercises`}
    {...props}
  />
);

export type UseRouteExercisesItemIdDeleteProps = Omit<
  UseMutateProps<ExerciseRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteExercisesItemIdDelete = (
  props: UseRouteExercisesItemIdDeleteProps
) =>
  useMutate<ExerciseRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/exercises`,
    { ...props }
  );

export interface RouteGroupsGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RouteGroupsGetProps = Omit<
  GetProps<GroupRead[], HTTPValidationError, RouteGroupsGetQueryParams, void>,
  "path"
>;

/**
 * Get All
 */
export const RouteGroupsGet = (props: RouteGroupsGetProps) => (
  <Get<GroupRead[], HTTPValidationError, RouteGroupsGetQueryParams, void>
    path={`/groups`}
    {...props}
  />
);

export type UseRouteGroupsGetProps = Omit<
  UseGetProps<
    GroupRead[],
    HTTPValidationError,
    RouteGroupsGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const useRouteGroupsGet = (props: UseRouteGroupsGetProps) =>
  useGet<GroupRead[], HTTPValidationError, RouteGroupsGetQueryParams, void>(
    `/groups`,
    props
  );

export type RouteGroupsPostProps = Omit<
  MutateProps<GroupRead, HTTPValidationError, void, GroupCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RouteGroupsPost = (props: RouteGroupsPostProps) => (
  <Mutate<GroupRead, HTTPValidationError, void, GroupCreate, void>
    verb="POST"
    path={`/groups`}
    {...props}
  />
);

export type UseRouteGroupsPostProps = Omit<
  UseMutateProps<GroupRead, HTTPValidationError, void, GroupCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRouteGroupsPost = (props: UseRouteGroupsPostProps) =>
  useMutate<GroupRead, HTTPValidationError, void, GroupCreate, void>(
    "POST",
    `/groups`,
    props
  );

export type RouteGroupsDeleteProps = Omit<
  MutateProps<GroupRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteGroupsDelete = (props: RouteGroupsDeleteProps) => (
  <Mutate<GroupRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/groups`}
    {...props}
  />
);

export type UseRouteGroupsDeleteProps = Omit<
  UseMutateProps<GroupRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteGroupsDelete = (props: UseRouteGroupsDeleteProps) =>
  useMutate<GroupRead[], unknown, void, void, void>("DELETE", `/groups`, {
    ...props,
  });

export interface RouteGroupsItemIdGetPathParams {
  item_id: number;
}

export type RouteGroupsItemIdGetProps = Omit<
  GetProps<
    GroupRead,
    HTTPValidationError,
    void,
    RouteGroupsItemIdGetPathParams
  >,
  "path"
> &
  RouteGroupsItemIdGetPathParams;

/**
 * Get One
 */
export const RouteGroupsItemIdGet = ({
  item_id,
  ...props
}: RouteGroupsItemIdGetProps) => (
  <Get<GroupRead, HTTPValidationError, void, RouteGroupsItemIdGetPathParams>
    path={`/groups/${item_id}`}
    {...props}
  />
);

export type UseRouteGroupsItemIdGetProps = Omit<
  UseGetProps<
    GroupRead,
    HTTPValidationError,
    void,
    RouteGroupsItemIdGetPathParams
  >,
  "path"
> &
  RouteGroupsItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteGroupsItemIdGet = ({
  item_id,
  ...props
}: UseRouteGroupsItemIdGetProps) =>
  useGet<GroupRead, HTTPValidationError, void, RouteGroupsItemIdGetPathParams>(
    (paramsInPath: RouteGroupsItemIdGetPathParams) =>
      `/groups/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteGroupsItemIdPutPathParams {
  item_id: number;
}

export type RouteGroupsItemIdPutProps = Omit<
  MutateProps<
    GroupRead,
    HTTPValidationError,
    void,
    GroupReadUpdate,
    RouteGroupsItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteGroupsItemIdPutPathParams;

/**
 * Update One
 */
export const RouteGroupsItemIdPut = ({
  item_id,
  ...props
}: RouteGroupsItemIdPutProps) => (
  <Mutate<
    GroupRead,
    HTTPValidationError,
    void,
    GroupReadUpdate,
    RouteGroupsItemIdPutPathParams
  >
    verb="PUT"
    path={`/groups/${item_id}`}
    {...props}
  />
);

export type UseRouteGroupsItemIdPutProps = Omit<
  UseMutateProps<
    GroupRead,
    HTTPValidationError,
    void,
    GroupReadUpdate,
    RouteGroupsItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteGroupsItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteGroupsItemIdPut = ({
  item_id,
  ...props
}: UseRouteGroupsItemIdPutProps) =>
  useMutate<
    GroupRead,
    HTTPValidationError,
    void,
    GroupReadUpdate,
    RouteGroupsItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteGroupsItemIdPutPathParams) =>
      `/groups/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteGroupsItemIdDeleteProps = Omit<
  MutateProps<GroupRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteGroupsItemIdDelete = (
  props: RouteGroupsItemIdDeleteProps
) => (
  <Mutate<GroupRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/groups`}
    {...props}
  />
);

export type UseRouteGroupsItemIdDeleteProps = Omit<
  UseMutateProps<GroupRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteGroupsItemIdDelete = (
  props: UseRouteGroupsItemIdDeleteProps
) =>
  useMutate<GroupRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/groups`,
    { ...props }
  );

export interface RouteLanguagesGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RouteLanguagesGetProps = Omit<
  GetProps<
    LanguageRead[],
    HTTPValidationError,
    RouteLanguagesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const RouteLanguagesGet = (props: RouteLanguagesGetProps) => (
  <Get<LanguageRead[], HTTPValidationError, RouteLanguagesGetQueryParams, void>
    path={`/languages`}
    {...props}
  />
);

export type UseRouteLanguagesGetProps = Omit<
  UseGetProps<
    LanguageRead[],
    HTTPValidationError,
    RouteLanguagesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const useRouteLanguagesGet = (props: UseRouteLanguagesGetProps) =>
  useGet<
    LanguageRead[],
    HTTPValidationError,
    RouteLanguagesGetQueryParams,
    void
  >(`/languages`, props);

export type RouteLanguagesPostProps = Omit<
  MutateProps<LanguageRead, HTTPValidationError, void, LanguageCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RouteLanguagesPost = (props: RouteLanguagesPostProps) => (
  <Mutate<LanguageRead, HTTPValidationError, void, LanguageCreate, void>
    verb="POST"
    path={`/languages`}
    {...props}
  />
);

export type UseRouteLanguagesPostProps = Omit<
  UseMutateProps<LanguageRead, HTTPValidationError, void, LanguageCreate, void>,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRouteLanguagesPost = (props: UseRouteLanguagesPostProps) =>
  useMutate<LanguageRead, HTTPValidationError, void, LanguageCreate, void>(
    "POST",
    `/languages`,
    props
  );

export type RouteLanguagesDeleteProps = Omit<
  MutateProps<LanguageRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteLanguagesDelete = (props: RouteLanguagesDeleteProps) => (
  <Mutate<LanguageRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/languages`}
    {...props}
  />
);

export type UseRouteLanguagesDeleteProps = Omit<
  UseMutateProps<LanguageRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteLanguagesDelete = (props: UseRouteLanguagesDeleteProps) =>
  useMutate<LanguageRead[], unknown, void, void, void>("DELETE", `/languages`, {
    ...props,
  });

export interface RouteLanguagesItemIdGetPathParams {
  item_id: number;
}

export type RouteLanguagesItemIdGetProps = Omit<
  GetProps<
    LanguageRead,
    HTTPValidationError,
    void,
    RouteLanguagesItemIdGetPathParams
  >,
  "path"
> &
  RouteLanguagesItemIdGetPathParams;

/**
 * Get One
 */
export const RouteLanguagesItemIdGet = ({
  item_id,
  ...props
}: RouteLanguagesItemIdGetProps) => (
  <Get<
    LanguageRead,
    HTTPValidationError,
    void,
    RouteLanguagesItemIdGetPathParams
  >
    path={`/languages/${item_id}`}
    {...props}
  />
);

export type UseRouteLanguagesItemIdGetProps = Omit<
  UseGetProps<
    LanguageRead,
    HTTPValidationError,
    void,
    RouteLanguagesItemIdGetPathParams
  >,
  "path"
> &
  RouteLanguagesItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteLanguagesItemIdGet = ({
  item_id,
  ...props
}: UseRouteLanguagesItemIdGetProps) =>
  useGet<
    LanguageRead,
    HTTPValidationError,
    void,
    RouteLanguagesItemIdGetPathParams
  >(
    (paramsInPath: RouteLanguagesItemIdGetPathParams) =>
      `/languages/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteLanguagesItemIdPutPathParams {
  item_id: number;
}

export type RouteLanguagesItemIdPutProps = Omit<
  MutateProps<
    LanguageRead,
    HTTPValidationError,
    void,
    LanguageReadUpdate,
    RouteLanguagesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteLanguagesItemIdPutPathParams;

/**
 * Update One
 */
export const RouteLanguagesItemIdPut = ({
  item_id,
  ...props
}: RouteLanguagesItemIdPutProps) => (
  <Mutate<
    LanguageRead,
    HTTPValidationError,
    void,
    LanguageReadUpdate,
    RouteLanguagesItemIdPutPathParams
  >
    verb="PUT"
    path={`/languages/${item_id}`}
    {...props}
  />
);

export type UseRouteLanguagesItemIdPutProps = Omit<
  UseMutateProps<
    LanguageRead,
    HTTPValidationError,
    void,
    LanguageReadUpdate,
    RouteLanguagesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteLanguagesItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteLanguagesItemIdPut = ({
  item_id,
  ...props
}: UseRouteLanguagesItemIdPutProps) =>
  useMutate<
    LanguageRead,
    HTTPValidationError,
    void,
    LanguageReadUpdate,
    RouteLanguagesItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteLanguagesItemIdPutPathParams) =>
      `/languages/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteLanguagesItemIdDeleteProps = Omit<
  MutateProps<LanguageRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteLanguagesItemIdDelete = (
  props: RouteLanguagesItemIdDeleteProps
) => (
  <Mutate<LanguageRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/languages`}
    {...props}
  />
);

export type UseRouteLanguagesItemIdDeleteProps = Omit<
  UseMutateProps<LanguageRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteLanguagesItemIdDelete = (
  props: UseRouteLanguagesItemIdDeleteProps
) =>
  useMutate<LanguageRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/languages`,
    { ...props }
  );

export interface RouteLanguagecategoriesGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RouteLanguagecategoriesGetProps = Omit<
  GetProps<
    LanguageCategoryRead[],
    HTTPValidationError,
    RouteLanguagecategoriesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const RouteLanguagecategoriesGet = (
  props: RouteLanguagecategoriesGetProps
) => (
  <Get<
    LanguageCategoryRead[],
    HTTPValidationError,
    RouteLanguagecategoriesGetQueryParams,
    void
  >
    path={`/languagecategories`}
    {...props}
  />
);

export type UseRouteLanguagecategoriesGetProps = Omit<
  UseGetProps<
    LanguageCategoryRead[],
    HTTPValidationError,
    RouteLanguagecategoriesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const useRouteLanguagecategoriesGet = (
  props: UseRouteLanguagecategoriesGetProps
) =>
  useGet<
    LanguageCategoryRead[],
    HTTPValidationError,
    RouteLanguagecategoriesGetQueryParams,
    void
  >(`/languagecategories`, props);

export type RouteLanguagecategoriesPostProps = Omit<
  MutateProps<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryCreate,
    void
  >,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RouteLanguagecategoriesPost = (
  props: RouteLanguagecategoriesPostProps
) => (
  <Mutate<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryCreate,
    void
  >
    verb="POST"
    path={`/languagecategories`}
    {...props}
  />
);

export type UseRouteLanguagecategoriesPostProps = Omit<
  UseMutateProps<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryCreate,
    void
  >,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRouteLanguagecategoriesPost = (
  props: UseRouteLanguagecategoriesPostProps
) =>
  useMutate<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryCreate,
    void
  >("POST", `/languagecategories`, props);

export type RouteLanguagecategoriesDeleteProps = Omit<
  MutateProps<LanguageCategoryRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RouteLanguagecategoriesDelete = (
  props: RouteLanguagecategoriesDeleteProps
) => (
  <Mutate<LanguageCategoryRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/languagecategories`}
    {...props}
  />
);

export type UseRouteLanguagecategoriesDeleteProps = Omit<
  UseMutateProps<LanguageCategoryRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRouteLanguagecategoriesDelete = (
  props: UseRouteLanguagecategoriesDeleteProps
) =>
  useMutate<LanguageCategoryRead[], unknown, void, void, void>(
    "DELETE",
    `/languagecategories`,
    { ...props }
  );

export interface RouteLanguagecategoriesItemIdGetPathParams {
  item_id: number;
}

export type RouteLanguagecategoriesItemIdGetProps = Omit<
  GetProps<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    RouteLanguagecategoriesItemIdGetPathParams
  >,
  "path"
> &
  RouteLanguagecategoriesItemIdGetPathParams;

/**
 * Get One
 */
export const RouteLanguagecategoriesItemIdGet = ({
  item_id,
  ...props
}: RouteLanguagecategoriesItemIdGetProps) => (
  <Get<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    RouteLanguagecategoriesItemIdGetPathParams
  >
    path={`/languagecategories/${item_id}`}
    {...props}
  />
);

export type UseRouteLanguagecategoriesItemIdGetProps = Omit<
  UseGetProps<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    RouteLanguagecategoriesItemIdGetPathParams
  >,
  "path"
> &
  RouteLanguagecategoriesItemIdGetPathParams;

/**
 * Get One
 */
export const useRouteLanguagecategoriesItemIdGet = ({
  item_id,
  ...props
}: UseRouteLanguagecategoriesItemIdGetProps) =>
  useGet<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    RouteLanguagecategoriesItemIdGetPathParams
  >(
    (paramsInPath: RouteLanguagecategoriesItemIdGetPathParams) =>
      `/languagecategories/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RouteLanguagecategoriesItemIdPutPathParams {
  item_id: number;
}

export type RouteLanguagecategoriesItemIdPutProps = Omit<
  MutateProps<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryReadUpdate,
    RouteLanguagecategoriesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteLanguagecategoriesItemIdPutPathParams;

/**
 * Update One
 */
export const RouteLanguagecategoriesItemIdPut = ({
  item_id,
  ...props
}: RouteLanguagecategoriesItemIdPutProps) => (
  <Mutate<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryReadUpdate,
    RouteLanguagecategoriesItemIdPutPathParams
  >
    verb="PUT"
    path={`/languagecategories/${item_id}`}
    {...props}
  />
);

export type UseRouteLanguagecategoriesItemIdPutProps = Omit<
  UseMutateProps<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryReadUpdate,
    RouteLanguagecategoriesItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RouteLanguagecategoriesItemIdPutPathParams;

/**
 * Update One
 */
export const useRouteLanguagecategoriesItemIdPut = ({
  item_id,
  ...props
}: UseRouteLanguagecategoriesItemIdPutProps) =>
  useMutate<
    LanguageCategoryRead,
    HTTPValidationError,
    void,
    LanguageCategoryReadUpdate,
    RouteLanguagecategoriesItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RouteLanguagecategoriesItemIdPutPathParams) =>
      `/languagecategories/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RouteLanguagecategoriesItemIdDeleteProps = Omit<
  MutateProps<LanguageCategoryRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RouteLanguagecategoriesItemIdDelete = (
  props: RouteLanguagecategoriesItemIdDeleteProps
) => (
  <Mutate<LanguageCategoryRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/languagecategories`}
    {...props}
  />
);

export type UseRouteLanguagecategoriesItemIdDeleteProps = Omit<
  UseMutateProps<LanguageCategoryRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRouteLanguagecategoriesItemIdDelete = (
  props: UseRouteLanguagecategoriesItemIdDeleteProps
) =>
  useMutate<LanguageCategoryRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/languagecategories`,
    { ...props }
  );

export interface RoutePermissiontagsGetQueryParams {
  skip?: number;
  limit?: number;
}

export type RoutePermissiontagsGetProps = Omit<
  GetProps<
    PermissionTagRead[],
    HTTPValidationError,
    RoutePermissiontagsGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const RoutePermissiontagsGet = (props: RoutePermissiontagsGetProps) => (
  <Get<
    PermissionTagRead[],
    HTTPValidationError,
    RoutePermissiontagsGetQueryParams,
    void
  >
    path={`/permissiontags`}
    {...props}
  />
);

export type UseRoutePermissiontagsGetProps = Omit<
  UseGetProps<
    PermissionTagRead[],
    HTTPValidationError,
    RoutePermissiontagsGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get All
 */
export const useRoutePermissiontagsGet = (
  props: UseRoutePermissiontagsGetProps
) =>
  useGet<
    PermissionTagRead[],
    HTTPValidationError,
    RoutePermissiontagsGetQueryParams,
    void
  >(`/permissiontags`, props);

export type RoutePermissiontagsPostProps = Omit<
  MutateProps<
    PermissionTagRead,
    HTTPValidationError,
    void,
    PermissionTagCreate,
    void
  >,
  "path" | "verb"
>;

/**
 * Create One
 */
export const RoutePermissiontagsPost = (
  props: RoutePermissiontagsPostProps
) => (
  <Mutate<
    PermissionTagRead,
    HTTPValidationError,
    void,
    PermissionTagCreate,
    void
  >
    verb="POST"
    path={`/permissiontags`}
    {...props}
  />
);

export type UseRoutePermissiontagsPostProps = Omit<
  UseMutateProps<
    PermissionTagRead,
    HTTPValidationError,
    void,
    PermissionTagCreate,
    void
  >,
  "path" | "verb"
>;

/**
 * Create One
 */
export const useRoutePermissiontagsPost = (
  props: UseRoutePermissiontagsPostProps
) =>
  useMutate<
    PermissionTagRead,
    HTTPValidationError,
    void,
    PermissionTagCreate,
    void
  >("POST", `/permissiontags`, props);

export type RoutePermissiontagsDeleteProps = Omit<
  MutateProps<PermissionTagRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const RoutePermissiontagsDelete = (
  props: RoutePermissiontagsDeleteProps
) => (
  <Mutate<PermissionTagRead[], unknown, void, void, void>
    verb="DELETE"
    path={`/permissiontags`}
    {...props}
  />
);

export type UseRoutePermissiontagsDeleteProps = Omit<
  UseMutateProps<PermissionTagRead[], unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * Delete All
 */
export const useRoutePermissiontagsDelete = (
  props: UseRoutePermissiontagsDeleteProps
) =>
  useMutate<PermissionTagRead[], unknown, void, void, void>(
    "DELETE",
    `/permissiontags`,
    { ...props }
  );

export interface RoutePermissiontagsItemIdGetPathParams {
  item_id: number;
}

export type RoutePermissiontagsItemIdGetProps = Omit<
  GetProps<
    PermissionTagRead,
    HTTPValidationError,
    void,
    RoutePermissiontagsItemIdGetPathParams
  >,
  "path"
> &
  RoutePermissiontagsItemIdGetPathParams;

/**
 * Get One
 */
export const RoutePermissiontagsItemIdGet = ({
  item_id,
  ...props
}: RoutePermissiontagsItemIdGetProps) => (
  <Get<
    PermissionTagRead,
    HTTPValidationError,
    void,
    RoutePermissiontagsItemIdGetPathParams
  >
    path={`/permissiontags/${item_id}`}
    {...props}
  />
);

export type UseRoutePermissiontagsItemIdGetProps = Omit<
  UseGetProps<
    PermissionTagRead,
    HTTPValidationError,
    void,
    RoutePermissiontagsItemIdGetPathParams
  >,
  "path"
> &
  RoutePermissiontagsItemIdGetPathParams;

/**
 * Get One
 */
export const useRoutePermissiontagsItemIdGet = ({
  item_id,
  ...props
}: UseRoutePermissiontagsItemIdGetProps) =>
  useGet<
    PermissionTagRead,
    HTTPValidationError,
    void,
    RoutePermissiontagsItemIdGetPathParams
  >(
    (paramsInPath: RoutePermissiontagsItemIdGetPathParams) =>
      `/permissiontags/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export interface RoutePermissiontagsItemIdPutPathParams {
  item_id: number;
}

export type RoutePermissiontagsItemIdPutProps = Omit<
  MutateProps<
    PermissionTagRead,
    HTTPValidationError,
    void,
    PermissionTagReadUpdate,
    RoutePermissiontagsItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RoutePermissiontagsItemIdPutPathParams;

/**
 * Update One
 */
export const RoutePermissiontagsItemIdPut = ({
  item_id,
  ...props
}: RoutePermissiontagsItemIdPutProps) => (
  <Mutate<
    PermissionTagRead,
    HTTPValidationError,
    void,
    PermissionTagReadUpdate,
    RoutePermissiontagsItemIdPutPathParams
  >
    verb="PUT"
    path={`/permissiontags/${item_id}`}
    {...props}
  />
);

export type UseRoutePermissiontagsItemIdPutProps = Omit<
  UseMutateProps<
    PermissionTagRead,
    HTTPValidationError,
    void,
    PermissionTagReadUpdate,
    RoutePermissiontagsItemIdPutPathParams
  >,
  "path" | "verb"
> &
  RoutePermissiontagsItemIdPutPathParams;

/**
 * Update One
 */
export const useRoutePermissiontagsItemIdPut = ({
  item_id,
  ...props
}: UseRoutePermissiontagsItemIdPutProps) =>
  useMutate<
    PermissionTagRead,
    HTTPValidationError,
    void,
    PermissionTagReadUpdate,
    RoutePermissiontagsItemIdPutPathParams
  >(
    "PUT",
    (paramsInPath: RoutePermissiontagsItemIdPutPathParams) =>
      `/permissiontags/${paramsInPath.item_id}`,
    { pathParams: { item_id }, ...props }
  );

export type RoutePermissiontagsItemIdDeleteProps = Omit<
  MutateProps<PermissionTagRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const RoutePermissiontagsItemIdDelete = (
  props: RoutePermissiontagsItemIdDeleteProps
) => (
  <Mutate<PermissionTagRead, HTTPValidationError, void, number, void>
    verb="DELETE"
    path={`/permissiontags`}
    {...props}
  />
);

export type UseRoutePermissiontagsItemIdDeleteProps = Omit<
  UseMutateProps<PermissionTagRead, HTTPValidationError, void, number, void>,
  "path" | "verb"
>;

/**
 * Delete One
 */
export const useRoutePermissiontagsItemIdDelete = (
  props: UseRoutePermissiontagsItemIdDeleteProps
) =>
  useMutate<PermissionTagRead, HTTPValidationError, void, number, void>(
    "DELETE",
    `/permissiontags`,
    { ...props }
  );
